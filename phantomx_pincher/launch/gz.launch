<!-- Example of planning with MoveIt and executing motions using ROS controllers within Gazebo -->
<launch>
  <!-- Name or filepath of the Gazebo world to load -->
  <arg name="world" default="default.sdf"/>
  <!-- Name of the robot -->
  <arg name="name" default="phantomx_pincher"/>
  <!-- Prefix for all robot entities (if modified, then joint names in the configuration of controllers must also be updated) -->
  <arg name="prefix" default="$(arg name)_"/>
  <!-- Flag to enable collision geometry -->
  <arg name="collision" default="true"/>
  <!-- The output control command interface provided by ros_control ('position', 'velocity', 'effort' or certain combinations 'position,velocity') -->
  <arg name="ros_control_command_interface" default="effort"/>
  <!-- Flag to enable mimicking of the finger joints -->
  <arg name="mimic_finger_joints" default="false"/>
  <!-- Flag to preserve fixed joints and prevent lumping when generating SDF for Gazebo -->
  <arg name="gazebo_preserve_fixed_joint" default="false"/>
  <!-- Render engine used by Gazebo (ogre or ogre2 [photorealistic]) -->
  <arg name="render_engine" default="ogre"/>
  <!-- Additional arguments for Gazebo -->
  <arg name="ign_args" default="-r -v 1"/>
  <!-- Path to configuration for RViz -->
  <arg name="rviz_config" default="$(find phantomx_pincher_moveit_config)/rviz/moveit.rviz"/>
  <!-- Flag to enable spawning of the robot -->
  <arg name="spawn_robot" default="true"/>
  <!-- Delay in seconds before spawning the robot into the Gazebo world -->
  <arg name="spawn_delay" default="1.0"/>
  <!-- Pose of the robot inside simulation-->
  <arg name="robot_x" default="0.0"/>
  <arg name="robot_y" default="0.0"/>
  <arg name="robot_z" default="0.0"/>
  <arg name="robot_roll" default="0.0"/>
  <arg name="robot_pitch" default="0.0"/>
  <arg name="robot_yaw" default="0.0"/>

  <!-- Use simulated time -->
  <param name="use_sim_time" value="true"/>
  <!-- ros_ign_bridge (clock -> ROS) -->
  <node name="$(anon ros_ign_bridge)" pkg="ros_ign_bridge" type="parameter_bridge" args="/clock@rosgraph_msgs/Clock[ignition.msgs.Clock"/>

  <!-- Generate URDF description for the robot and store as a parameter -->
  <param name="robot_description" command="xacro name:=$(arg name) prefix:=$(arg prefix) collision:=$(arg collision) ros_control:=true ros_control_plugin:=ign ros_control_command_interface:=$(arg ros_control_command_interface) mimic_finger_joints:=$(arg mimic_finger_joints) gazebo_preserve_fixed_joint:=$(arg gazebo_preserve_fixed_joint) '$(find phantomx_pincher_description)/urdf/phantomx_pincher.urdf.xacro'"/>
  <!-- Generate SDF descriptions for the robot from xacro -->
  <node name="xacro2sdf" pkg="phantomx_pincher_description" type="xacro2sdf.bash" args="name:=$(arg name) prefix:=$(arg prefix) collision:=$(arg collision) ros_control:=true ros_control_plugin:=ign ros_control_command_interface:=$(arg ros_control_command_interface) mimic_finger_joints:=$(arg mimic_finger_joints) gazebo_preserve_fixed_joint:=$(arg gazebo_preserve_fixed_joint)" if="$(arg spawn_robot)"/>

  <!-- Start Gazebo -->
  <include file="$(find ros_ign_gazebo)/launch/ign_gazebo.launch">
    <arg name="ign_args" value="$(arg world) --render-engine $(arg render_engine) $(arg ign_args)"/>
  </include>
  <!-- Insert SDF model of the robot -->
  <arg name="world_name" default="$(eval str(arg('world')).split('/')[-1].split('.')[0])"/>
  <node name="$(anon ros_ign_gazebo_create)" pkg="ros_ign_gazebo" type="create" args="-world $(arg world_name) -file $(find phantomx_pincher_description)/phantomx_pincher/model.sdf -x $(arg robot_x) -y $(arg robot_y) -z $(arg robot_z) -R $(arg robot_roll) -P $(arg robot_pitch) -Y $(arg robot_yaw)" launch-prefix="bash -c 'sleep $(arg spawn_delay); $0 $@' " if="$(arg spawn_robot)"/>

  <!-- Spawn controllers -->
  <rosparam file="$(find phantomx_pincher_moveit_config)/config/controllers_$(arg ros_control_command_interface).yaml" command="load"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="joint_state_publisher joint_trajectory_controller gripper_trajectory_controller"/>
  <!-- Publish tf frames of the robot based on the current joint states -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true"/>

  <!-- Launch move_group of MoveIt to enable motion planning -->
  <arg name="pipeline" default="ompl"/>
  <include file="$(find phantomx_pincher_moveit_config)/launch/move_group.launch">
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="moveit_manage_controllers" value="true"/>
    <arg name="moveit_controller_manager" value="simple_gz"/>
    <arg name="info" value="true"/>
  </include>

  <!-- Run Rviz -->
  <arg name="use_rviz" default="true"/>
  <include file="$(find phantomx_pincher_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(arg rviz_config)"/>
  </include>
</launch>
